subworkflow puck12:
    workdir:
        "../Puck_180819_12"

rule select_all:
    input:
        loom=data("data.loom"),
    output:
        genes="genes/all.txt"
    script: "../pipelineScripts/select_all.py"

rule PCA:
    message: "Computing PCA"
    input:
        loom=data("data.loom"),
        genes=rules.select_all.output.genes,
    output:
        latent="pca/pca_all.txt",
    script: "../pipelineScripts/pca/pca.py"

rule TSNE:
    message: "Computing TSNE"
    input:
        latent=rules.PCA.output.latent,
    output:
        out="tsne/tsne.txt",
    script: "../pipelineScripts/tsne/tsne.py"

rule UMAP:
    message: "Computing UMAP"
    input:
        latent=rules.PCA.output.latent,
    params:
        n_neighbors=30,
    output:
        out="umap/umap.txt",
        out3="umap/umap3.txt",
    script: "../pipelineScripts/umap/umap.py"

rule extractPositions:
    input:
        loom=data("data.loom")
    output:
        positions="positions/positions.txt"
    script: "../pipelineScripts/extractPositions.py"

rule runHotspot:
    input:
        loom=data("data.loom"),
        latent=rules.extractPositions.output.positions,
    params:
        model='bernoulli',
        n_neighbors=300,
    output:
        results="hotspot/hotspot.txt"
    script: "../pipelineScripts/hotspot/runHotspot.py"

rule runHotspotPairs:
    input:
        loom=data("data.loom"),
        latent=rules.extractPositions.output.positions,
        hs_results=rules.runHotspot.output.results,
    params:
        model='bernoulli',
        fdrThresh=0.05,
        n_neighbors=30,
    output:
        results_z="hotspot/hotspot_pairs_z.txt.gz"
    script: "../pipelineScripts/hotspot/runHotspotPairs.py"

# Hotspot pairs, but using the genes from puck 12
rule runHotspotPairs_Puck12:
    input:
        loom=data("data.loom"),
        latent=rules.extractPositions.output.positions,
        hs_results=puck12("hotspot/hotspot.txt"),
    params:
        model='bernoulli',
        fdrThresh=0.05,
        n_neighbors=30,
    output:
        results_z="hotspot/hotspot_pairs_z_12.txt.gz"
    script: "../pipelineScripts/hotspot/runHotspotPairs.py"

rule extractHotspotModules:
    input:
        results_z=rules.runHotspotPairs.output.results_z,
    params:
        min_cluster_genes=20,
        core_only=False,
        #z_threshold=1.65,
        fdr_threshold=.05,
    output:
        cluster_heatmap="hotspot/module_heatmap.svg",
        cluster_output="hotspot/modules.txt",
        linkage_output="hotspot/linkage.txt",
    script: "../pipelineScripts/hotspot/extractHotspotModules.py"

rule computeModuleScores:
    input:
        loom=data("data.loom"),
        latent=rules.extractPositions.output.positions,
        modules=rules.extractHotspotModules.output.cluster_output,
    params:
        n_neighbors=30,
        model="bernoulli",
    output:
        scores="hotspot/module_scores.txt.gz",
    script: "../pipelineScripts/hotspot/computeModuleScores.py"

rule spatialDE:
    input:
        loom=data("data.loom"),
        latent=rules.extractPositions.output.positions,
    params:
        l_min=50,
    threads: 10
    output:
        results="spatialDE/spatialDE.txt"
    script: "../pipelineScripts/SpatialDE/runSpatialDE.py"

rule spatialDEClusters:
    input:
        loom=data("data.loom"),
        latent=rules.extractPositions.output.positions,
        sde_results=rules.spatialDE.output.results,
    output:
        hist="spatialDE/histology.txt",
        patterns="spatialDE/patterns.txt",
    script: "../pipelineScripts/SpatialDE/runSpatialDECluster.py"

rule vision:
    input:
        loom=data("data.loom"),
        latent=rules.extractPositions.output.positions,
        proj_positions=rules.extractPositions.output.positions,
        tsne=rules.TSNE.output.out,
        umap=rules.UMAP.output.out,
    output:
        out="vision/vision.rds"
    script: "../pipelineScripts/Vision/vision.R"

include: "Snakefile_nb"
include: "Snakefile_k_sensitivity"

rule all:
    input:
        rules.UMAP.output.out,
        rules.TSNE.output.out,
        rules.vision.output.out,
        rules.runHotspotPairs.output,
        rules.extractHotspotModules.output,
        rules.runHotspotPairs_Puck12.output,
        rules.computeModuleScores.output,
