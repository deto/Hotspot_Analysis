subworkflow data:
    workdir:
        "../../data/Simulated6"

data_file = "obs_counts_vary_alpha/alpha_{alpha_mean}/data.loom"
gene_effect_file = "true_counts/gene_effects.txt"

rule select_threshold:
    input:
        loom=data(data_file),
    params:
        N_CELLS=10,
    output:
        genes="alpha_{alpha_mean}/genes/threshold.txt"
    script: "pipelineScripts/select_threshold.py"

rule select_for_pairs:
    input:
        ge_file=data(gene_effect_file),
    output:
        genes="alpha_{alpha_mean}/genes/forPairs.txt"
    script: "pipelineScripts/select_for_pairs.py"

rule select_hvg:
    input:
        loom=data(data_file),
    params:
        lowXcutoff=0.1,
        #highXMeanCutoff=20,
    output:
        genes="alpha_{alpha_mean}/genes/hvg.txt",
        geneInfo="alpha_{alpha_mean}/genes/hvg_info.txt"
    script: "pipelineScripts/select_hvg.R"

rule select_danb:
    input:
        loom=data(data_file),
    params:
        #highXMeanCutoff=20,
    output:
        genes="alpha_{alpha_mean}/genes/danb.txt",
        geneInfo="alpha_{alpha_mean}/genes/danb_info.txt"
    script: "pipelineScripts/select_danb.R"

rule PCA_threshold:
    message: "Computing PCA on thresholded genes"
    input:
        loom=data(data_file),
        genes=rules.select_threshold.output.genes,
    params:
        doStandardize=True,
        doJackstraw=False,
        num_pcs=5,
    output:
        latent="alpha_{alpha_mean}/pca/pca_threshold.txt",
        components="alpha_{alpha_mean}/pca/pca_components.txt",
    script: "pipelineScripts/pca/pca_sim.py"

rule select_pca:
    input:
        components=rules.PCA_threshold.output.components,
    output:
        genes="alpha_{alpha_mean}/genes/pca.txt",
        geneInfo="alpha_{alpha_mean}/genes/pca_info.txt"
    script: "pipelineScripts/select_pca.py"

rule SCVI:
    message: "Computing SCVI on thresholded genes"
    input:
        loom=data(data_file),
        genes=rules.select_threshold.output.genes,
    params:
        components=10,
    output:
        latent="alpha_{alpha_mean}/scvi/threshold/latent.txt.gz",
        model="alpha_{alpha_mean}/scvi/threshold/model.pkl",
    script: "pipelineScripts/scvi/scviTorch.py"

rule TSNE:
    message: "Computing TSNE - hvg genes"
    input:
        latent=rules.SCVI.output.latent,
    output:
        out="alpha_{alpha_mean}/tsne/tsne.txt",
    script: "pipelineScripts/tsne/tsne.py"

rule UMAP:
    message: "Computing UMAP"
    input:
        latent=rules.SCVI.output.latent,
    params:
        n_neighbors=30,
    output:
        out="alpha_{alpha_mean}/umap/umap.txt",
    script: "pipelineScripts/umap/umap.py"

rule TSNE_pca:
    message: "Computing TSNE - hvg genes"
    input:
        latent=rules.PCA_threshold.output.latent,
    output:
        out="alpha_{alpha_mean}/tsne/tsne_pca.txt",
    script: "pipelineScripts/tsne/tsne.py"

rule UMAP_pca:
    message: "Computing UMAP"
    input:
        latent=rules.PCA_threshold.output.latent,
    params:
        n_neighbors=30,
    output:
        out="alpha_{alpha_mean}/umap/umap_pca.txt",
    script: "pipelineScripts/umap/umap.py"

rule runHotspot_threshold:
    input:
        loom=data(data_file),
        latent=rules.SCVI.output.latent,
    params:
        model='danb',
        n_neighbors=30,
        n_cells_min=10,
    output:
        results="alpha_{alpha_mean}/hotspot/hotspot_threshold.txt"
    script: "pipelineScripts/hotspot/runHotspot.py"

rule runHotspot_threshold_300:
    input:
        loom=data(data_file),
        latent=rules.SCVI.output.latent,
    params:
        model='danb',
        n_neighbors=300,
        n_cells_min=10,
        weighted_graph=True,
    output:
        results="alpha_{alpha_mean}/hotspot/hotspot_threshold_300.txt"
    script: "pipelineScripts/hotspot/runHotspot.py"

rule runHotspot_threshold_pca:
    input:
        loom=data(data_file),
        latent=rules.PCA_threshold.output.latent,
    params:
        model='danb',
        n_neighbors=300,
        n_cells_min=10,
        weighted_graph=True,
    output:
        results="alpha_{alpha_mean}/hotspot/hotspot_pca_threshold.txt"
    script: "pipelineScripts/hotspot/runHotspot.py"

rule runHotspotPairs:
    input:
        loom=data(data_file),
        latent=rules.SCVI.output.latent,
        hs_results=rules.runHotspot_threshold.output.results,
        genes=rules.select_for_pairs.output.genes,
    params:
        model='danb',
        fdrThresh=0.05,
        # topN=500,
        n_neighbors=30,
        # highXMeanCutoff=20,
    output:
        results_z="alpha_{alpha_mean}/hotspot/hotspot_pairs_z.txt.gz"
    script: "pipelineScripts/hotspot/runHotspotPairs.py"

rule runRegularPairs:
    input:
        loom=data(data_file),
        latent=rules.SCVI.output.latent,
        hs_results=rules.runHotspot_threshold.output.results,
        genes=rules.select_for_pairs.output.genes,
    params:
        model='danb',
        fdrThresh=0.05,
        # topN=500,
        n_neighbors=30,
        # highXMeanCutoff=20,
    output:
        results_lc="alpha_{alpha_mean}/hotspot/regular_pairs_lc.txt.gz",
    script: "pipelineScripts/hotspot/runRegularPairs.py"

rule extractHotspotModules:
    input:
        results_z=rules.runHotspotPairs.output.results_z,
    params:
        min_cluster_genes=15,
        core_only=False,
        # z_threshold=1.96,
        fdr_threshold=.05,
    output:
        cluster_heatmap="alpha_{alpha_mean}/hotspot/module_heatmap.svg",
        cluster_output="alpha_{alpha_mean}/hotspot/modules.txt",
        linkage_output="alpha_{alpha_mean}/hotspot/linkage.txt",
    script: "pipelineScripts/hotspot/extractHotspotModules.py"


rule extractRegularModules:
    input:
        results_z=rules.runRegularPairs.output.results_lc,
        latent=rules.SCVI.output.latent,
    params:
        min_cluster_genes=15,
        core_only=False,
        fdr_threshold=.05,
    output:
        cluster_heatmap="alpha_{alpha_mean}/hotspot/module_heatmap_regular.svg",
        cluster_output="alpha_{alpha_mean}/hotspot/modules_regular.txt",
        linkage_output="alpha_{alpha_mean}/hotspot/linkage_regular.txt",
    script: "pipelineScripts/hotspot/extractRegularModules.py"


rule vision:
    input:
        loom=data(data_file),
        latent=rules.SCVI.output.latent,
        proj_positions=rules.SCVI.output.latent,
        tsne=rules.TSNE.output.out,
        umap=rules.UMAP.output.out,
    output:
        out="alpha_{alpha_mean}/vision/vision.rds"
    script: "pipelineScripts/Vision/vision.R"

rule vision_pca:
    input:
        loom=data(data_file),
        latent=rules.PCA_threshold.output.latent,
        proj_positions=rules.PCA_threshold.output.latent,
        tsne=rules.TSNE_pca.output.out,
        umap=rules.UMAP_pca.output.out,
    output:
        out="alpha_{alpha_mean}/vision/vision_pca.rds"
    script: "pipelineScripts/Vision/vision.R"

rule run_WGCNA:
    input:
        loom=data(data_file),
        genes=rules.select_for_pairs.output.genes,
    params:
        power=1,
        min_module_size=15,
    output:
        cluster_output="alpha_{alpha_mean}/wgcna/modules.txt",
        scores="alpha_{alpha_mean}/wgcna/module_scores.txt",
    script: "../../pipelineScripts/wgcna/wgcna.R"

rule run_ICA:
    input:
        loom=data(data_file),
        genes=rules.select_for_pairs.output.genes,
    params:
        n_components=5,
    output:
        components="alpha_{alpha_mean}/ica/components.txt",
    script: "../../pipelineScripts/ICA/run_ica.py"

rule run_ICA_fdr:
    input:
        components="alpha_{alpha_mean}/ica/components.txt",
    params:
        qvalcutoff=.1
    output:
        components_fdr="alpha_{alpha_mean}/ica/components_fdr.txt",
        modules="alpha_{alpha_mean}/ica/modules.txt",
    script: "../../pipelineScripts/ICA/run_ica_fdr.R"

rule runGrnboost:
    input:
        loom=data(data_file),
        genes=rules.select_for_pairs.output.genes,
    output:
        pair_scores="alpha_{alpha_mean}/grnboost/importance_scores.txt.gz",
    shell: 
        """
        python pipelineScripts/grnboost2/grnboost2.py \
            `readlink -f {input.loom}` \
            `readlink -f {input.genes}` \
            `readlink -f {output.pair_scores}`
        """

rule extractModules_Grnboost:
    input:
        results_z=rules.runGrnboost.output.pair_scores,
    params:
        min_cluster_genes=15,
        fdr_threshold=.05,
    output:
        cluster_heatmap="alpha_{alpha_mean}/grnboost/module_heatmap.svg",
        cluster_output="alpha_{alpha_mean}/grnboost/modules.txt",
        linkage_output="alpha_{alpha_mean}/grnboost/linkage.txt",
    script: "pipelineScripts/grnboost2/extractModules.py"

alpha_means = ["0.01", "0.02", "0.05", "0.10", "0.15", "0.2"]

rule all_reps:
    input:
        # expand(rules.UMAP.output.out, alpha_mean=alpha_means),
        # expand(rules.TSNE.output.out, alpha_mean=alpha_means),
        # expand(rules.vision.output.out, alpha_mean=alpha_means),
        expand(rules.runHotspot_threshold_300.output, alpha_mean=alpha_means),
        expand(rules.runHotspot_threshold_pca.output, alpha_mean=alpha_means),
        expand(rules.runHotspotPairs.output, alpha_mean=alpha_means),
        expand(rules.runRegularPairs.output, alpha_mean=alpha_means),
        expand(rules.extractHotspotModules.output, alpha_mean=alpha_means),
        expand(rules.extractRegularModules.output, alpha_mean=alpha_means),
        expand(rules.select_hvg.output, alpha_mean=alpha_means),
        expand(rules.select_danb.output, alpha_mean=alpha_means),
        expand(rules.select_pca.output, alpha_mean=alpha_means),
        # expand(rules.TSNE_pca.output, alpha_mean=alpha_means),
        expand(rules.run_WGCNA.output, alpha_mean=alpha_means),
        expand(rules.run_ICA_fdr.output, alpha_mean=alpha_means),
        expand(rules.extractModules_Grnboost.output, alpha_mean=alpha_means),
