# For this file we use the iterated genes

rule select_hs:
    input:
        hs_results=rules.runHotspot_threshold_pca.output.results,
    params:
        fdrThresh=0.05,
        cThresh=0.05,
    output:
        genes="genes/hs.txt"
    script: "pipelineScripts/select_hs.py"

rule select_hs_topN:
    input:
        geneInfo=rules.runHotspot_threshold_pca.output.results,
    params:
        N=1000,
        var="Z",
        ascending=False,
    output:
        genes="genes/hs_topN.txt"
    script: "pipelineScripts/select_topN.py"

rule PCA_hs:
    message: "Computing PCA on highly-variable genes"
    input:
        loom=data(data_file),
        genes=rules.select_hs_topN.output.genes,
    output:
        latent="pca/pca_hs.txt",
    script: "pipelineScripts/pca/pca.py"

rule SCVI_hs:
    message: "Computing SCVI on hs genes"
    input:
        loom=data(data_file),
        genes=rules.select_hs_topN.output.genes,
    params:
        components=10,
    output:
        latent="scvi/hs/latent.txt.gz",
        model="scvi/hs/model.pkl",
    script: "pipelineScripts/scvi/scviTorch.py"

rule TSNE_hs:
    message: "Computing TSNE - hs genes"
    input:
        latent=rules.SCVI_hs.output.latent,
    output:
        out="tsne/tsne_hs.txt",
    script: "pipelineScripts/tsne/tsne.py"

rule UMAP_hs:
    message: "Computing UMAP"
    input:
        latent=rules.SCVI_hs.output.latent,
    params:
        n_neighbors=30,
    output:
        out="umap/umap_hs.txt",
    script: "pipelineScripts/umap/umap.py"

rule runHotspot_hs_proteins:
    input:
        proteins=data(ab_file),
        latent=rules.SCVI_hs.output.latent,
    params:
        model='normal',
        n_neighbors=30,
        n_cells_min=10,
    output:
        results="hotspot/hotspot_hs_proteins.txt"
    script: "pipelineScripts/hotspot/runHotspotProteins.py"

rule vision_hs:
    input:
        loom=data(data_file),
        latent=rules.SCVI_hs.output.latent,
        proj_positions=rules.SCVI_hs.output.latent,
        tsne=rules.TSNE_hs.output.out,
        umap=rules.UMAP_hs.output.out,
        proteins=data(ab_file),
    output:
        out="vision/vision_hs.rds"
    script: "pipelineScripts/Vision/vision.R"
